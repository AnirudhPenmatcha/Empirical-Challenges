squared_residuals <- residuals^2
mse <- mean(squared_residuals)
rmse_lm <- sqrt(mse)
rmse_lm
y_train <- train$Weekly_Sales
X_train <- subset(train, select = -Weekly_Sales)
X_matrix <- as.matrix(X_train)
y_matrix <- as.matrix(y_train)
lasso_model <- cv.glmnet(X_matrix, y_matrix, alpha = 1)
coef(lasso_model)
plot(lasso_model)
X_train_rem_hol <- subset(X_train, select = -EventsNo_Holiday)
X_train_rem_hol <- as.matrix(X_train_rem_hol)
y_train <- as.matrix(y_train)
fit2 <- lm(y_train ~ X_train_rem_hol)
summary(fit2)
X_train_rem_months <- X_train[, !(colnames(X_train) %in% c("month2", "month3", "month4", "month5", "month6", "month7", "month8", "month9", "month10", "month11", "month12"))]
X_train_rem_months <- as.matrix(X_train_rem_months)
fit3 <- lm(y_train ~ X_train_rem_months)
summary(fit3)
X_train_rem_fuel <- X_train[, !(colnames(X_train) %in% c("Fuel_Price"))]
X_train_rem_fuel <- as.matrix(X_train_rem_fuel)
fit4 <- lm(y_train ~ X_train_rem_fuel)
summary(fit4)
X_train_rem_emp <- X_train[, !(colnames(X_train) %in% c("Unemployment"))]
X_train_rem_emp <- as.matrix(X_train_rem_emp)
fit5 <- lm(y_train ~ X_train_rem_emp)
summary(fit5)
library(randomForest)
# Fit random forest model using the training data
rf_model <- randomForest(X_train, y_train, ntree = 500, mtry = 4)
# View model summary
print(rf_model)
# Predict using the trained model on the test data
predictions <- predict(rf_model, X_test)
# Calculate RMSE (if needed)
# Assuming 'y_test' contains the actual test set values
rmse <- sqrt(mean((predictions - y_test)^2))
rmse
# Fit random forest model using the training data
rf_model <- randomForest(X_train, y_train, ntree = 1000, mtry = 6)
# View model summary
print(rf_model)
# Predict using the trained model on the test data
predictions <- predict(rf_model, X_test)
# Calculate RMSE (if needed)
# Assuming 'y_test' contains the actual test set values
rmse <- sqrt(mean((predictions - y_test)^2))
rmse
# Fit random forest model using the training data
rf_model <- randomForest(X_train, y_train, ntree = 500, mtry = 4)
# View model summary
print(rf_model)
# Predict using the trained model on the test data
predictions <- predict(rf_model, X_test)
# Calculate RMSE (if needed)
# Assuming 'y_test' contains the actual test set values
rmse <- sqrt(mean((predictions - y_test)^2))
rmse
# Fit random forest model using the training data
rf_model <- randomForest(X_train, y_train, ntree = 500, mtry = 4)
# View model summary
print(rf_model)
# Predict using the trained model on the test data
predictions <- predict(rf_model, X_test)
# Calculate RMSE (if needed)
# Assuming 'y_test' contains the actual test set values
rmse_rf <- sqrt(mean((predictions - y_test)^2))
rmse_rf
# Fit random forest model using the training data
rf_model <- randomForest(X_train, y_train, ntree = 300, mtry = 4)
# View model summary
print(rf_model)
# Predict using the trained model on the test data
predictions <- predict(rf_model, X_test)
# Calculate RMSE (if needed)
# Assuming 'y_test' contains the actual test set values
rmse_rf <- sqrt(mean((predictions - y_test)^2))
rmse_rf
# Fit random forest model using the training data
rf_model <- randomForest(X_train, y_train, ntree = 50, mtry = 4)
# View model summary
print(rf_model)
# View model summary
print(rf_model)
RMSE
# Calculate RMSE (if needed)
# Assuming 'y_test' contains the actual test set values
rmse_rf <- sqrt(mean((predictions - y_test)^2))
rmse_rf
# Fit random forest model using the training data
rf_model <- randomForest(X_train, y_train, ntree = 10)
# View model summary
print(rf_model)
# View model summary
print(rf_model)
RMSE
# Calculate RMSE (if needed)
# Assuming 'y_test' contains the actual test set values
rmse_rf <- sqrt(mean((predictions - y_test)^2))
rmse_rf
# Fit random forest model using the training data
rf_model <- randomForest(X_train, y_train, ntree = 1500, mtry = 6)
# View model summary
print(rf_model)
# View model summary
print(rf_model)
RMSE
# Calculate RMSE (if needed)
# Assuming 'y_test' contains the actual test set values
rmse_rf <- sqrt(mean((predictions - y_test)^2))
rmse_rf
# Fit random forest model using the training data
rf_model <- randomForest(X_train, y_train, ntree = 500, mtry = 4)
# View model summary
print(rf_model)
# View model summary
print(rf_model)
RMSE
# Calculate RMSE (if needed)
# Assuming 'y_test' contains the actual test set values
rmse_rf <- sqrt(mean((predictions - y_test)^2))
rmse_rf
plot(rf_model)
library(randomForest)
# Fit random forest model using the training data
rf_model <- randomForest(X_train, y_train, ntree = 500, mtry = 4)
# View model summary
print(rf_model)
library(randomForest)
# Fit random forest model using the training data
rf_model <- randomForest(X_train, y_train, ntree = 500, mtry = 4)
# View model summary
print(rf_model)
# Predict using the trained model on the test data
predictions <- predict(rf_model, X_test)
# Calculate RMSE (if needed)
# Assuming 'y_test' contains the actual test set values
rmse_rf <- sqrt(mean((predictions - y_test)^2))
rmse_rf
plot(rf_model)
rf_model
summary(rf_model)
View(train)
View(df_encoded)
mae <- mae(y_test, prediction)
library(Metrics)
install.packages("Metrics")
fit1 <- lm(Weekly_Sales ~ ., data = train)
summary(fit1)
y_test <- test$Weekly_Sales
X_test <- subset(test, select = -Weekly_Sales)
prediction = predict(model, newdata = X_test)
residuals <- y_test - prediction
squared_residuals <- residuals^2
mse <- mean(squared_residuals)
rmse_lm <- sqrt(mse)
rmse_lm
```{r}
library(Metrics)
mae <- mae(y_test, prediction)
mae
y_train <- train$Weekly_Sales
X_train <- subset(train, select = -Weekly_Sales)
X_matrix <- as.matrix(X_train)
y_matrix <- as.matrix(y_train)
lasso_model <- cv.glmnet(X_matrix, y_matrix, alpha = 1)
coef(lasso_model)
prediction <- predict(lasso_model, newdata = X_test)
prediction <- predict(lasso_model, newx = X_test)
y_train <- train$Weekly_Sales
X_train <- subset(train, select = -Weekly_Sales)
y_test <- test$Weekly_Sales
X_test <- subset(test, select = -Weekly_Sales)
X_train <- as.matrix(X_train)
y_train <- as.matrix(y_train)
fit1 <- lm(Weekly_Sales ~ ., data = train)
summary(fit1)
prediction = predict(model, newdata = X_test)
residuals <- y_test - prediction
squared_residuals <- residuals^2
mse <- mean(squared_residuals)
rmse_lm <- sqrt(mse)
rmse_lm
prediction = predict(model, newdata = X_test)
residuals <- y_test - prediction
squared_residuals <- residuals^2
mse <- mean(squared_residuals)
rmse_lm <- sqrt(mse)
rmse_lm
```{r}
mae <- mae(y_test, prediction)
mae
library(readr)
library(glmnet)
library(corrplot)
library(Metrics)
data <- read_csv("~/University/E401 Machine Learning For Economic Data/Final Project/Walmart Sales Forecast/data5.csv")
corr = cor(data[, c(1:9)])
corrplot(corr, method = "color", cl.pos = 'n', rect.col = "black",  tl.col = "black", addCoef.col = "black", number.digits = 2, number.cex = 0.60, tl.cex = 0.7, cl.cex = 1, col = colorRampPalette(c("darkred","white","lightblue"))(100))
train <- read_csv("~/University/E401 Machine Learning For Economic Data/Final Project/Walmart Sales Forecast/trainingSet.csv")
test <- read_csv("~/University/E401 Machine Learning For Economic Data/Final Project/Walmart Sales Forecast/testSet.csv")
y_train <- train$Weekly_Sales
X_train <- subset(train, select = -Weekly_Sales)
y_test <- test$Weekly_Sales
X_test <- subset(test, select = -Weekly_Sales)
X_train <- as.matrix(X_train)
y_train <- as.matrix(y_train)
X_test <- as.matrix(X_test)
y_test <- as.matrix(y_test)
fit1 <- lm(Weekly_Sales ~ ., data = train)
summary(fit1)
fit_lm <- lm(Weekly_Sales ~ ., data = train)
summary(fit_lm)
prediction = predict(model, newdata = X_test)
prediction = predict(fit_lm, newdata = X_test)
X_test <- subset(test, select = -Weekly_Sales)
y_train <- train$Weekly_Sales
X_train <- subset(train, select = -Weekly_Sales)
X_train <- as.matrix(X_train)
y_train <- as.matrix(y_train)
y_test <- test$Weekly_Sales
X_test <- subset(test, select = -Weekly_Sales)
library(readr)
library(glmnet)
library(corrplot)
library(Metrics)
data <- read_csv("~/University/E401 Machine Learning For Economic Data/Final Project/Walmart Sales Forecast/data5.csv")
corr = cor(data[, c(1:9)])
corrplot(corr, method = "color", cl.pos = 'n', rect.col = "black",  tl.col = "black", addCoef.col = "black", number.digits = 2, number.cex = 0.60, tl.cex = 0.7, cl.cex = 1, col = colorRampPalette(c("darkred","white","lightblue"))(100))
train <- read_csv("~/University/E401 Machine Learning For Economic Data/Final Project/Walmart Sales Forecast/trainingSet.csv")
test <- read_csv("~/University/E401 Machine Learning For Economic Data/Final Project/Walmart Sales Forecast/testSet.csv")
y_train <- train$Weekly_Sales
X_train <- subset(train, select = -Weekly_Sales)
X_train <- as.matrix(X_train)
y_train <- as.matrix(y_train)
y_test <- test$Weekly_Sales
X_test <- subset(test, select = -Weekly_Sales)
fit_lm <- lm(Weekly_Sales ~ ., data = train)
summary(fit_lm)
prediction = predict(fit_lm, newdata = X_test)
residuals <- y_test - prediction
squared_residuals <- residuals^2
mse <- mean(squared_residuals)
rmse_lm <- sqrt(mse)
rmse_lm
prediction = predict(fit_lm, newdata = X_test)
residuals <- y_test - prediction
squared_residuals <- residuals^2
mse <- mean(squared_residuals)
rmse_lm <- sqrt(mse)
rmse_lm
```{r}
mae <- mae(y_test, prediction)
mae
lasso_model <- cv.glmnet(X_matrix, y_matrix, alpha = 1)
coef(lasso_model)
mae_lm <- mae(y_test, prediction)
mae_lm
X_test <- as.matrix(X_test)
y_test <- as.matrix(y_test)
prediction <- predict(lasso_model, newx = X_test)
mae <- mae(y_test, prediction)
mae_lasso <- mae(y_test, prediction)
mae_lasso
plot(lasso_model)
X_train_rem_hol <- subset(X_train, select = -EventsNo_Holiday)
X_train_rem_hol <- as.matrix(X_train_rem_hol)
y_train <- as.matrix(y_train)
fit2 <- lm(y_train ~ X_train_rem_hol)
summary(fit2)
fit2_rem_hol <- lm(y_train ~ X_train_rem_hol)
summary(fit2_rem_hol)
prediction <- predict(fit2_rem_hol, newx = X_test)
mae_rem_hol <- mae(y_test, prediction)
prediction <- predict(fit2_rem_hol, newx = X_test)
mae_rem_hol <- mae(y_test, prediction)
y_test_rem_hol <- subset(y_test, select = -EventsNo_Holiday)
mae_rem_hol <- mae(y_test, prediction)
library(readr)
library(glmnet)
library(corrplot)
library(Metrics)
data <- read_csv("~/University/E401 Machine Learning For Economic Data/Final Project/Walmart Sales Forecast/data5.csv")
corr = cor(data[, c(1:9)])
corrplot(corr, method = "color", cl.pos = 'n', rect.col = "black",  tl.col = "black", addCoef.col = "black", number.digits = 2, number.cex = 0.60, tl.cex = 0.7, cl.cex = 1, col = colorRampPalette(c("darkred","white","lightblue"))(100))
train <- read_csv("~/University/E401 Machine Learning For Economic Data/Final Project/Walmart Sales Forecast/trainingSet.csv")
test <- read_csv("~/University/E401 Machine Learning For Economic Data/Final Project/Walmart Sales Forecast/testSet.csv")
y_train <- train$Weekly_Sales
X_train <- subset(train, select = -Weekly_Sales)
X_train <- as.matrix(X_train)
y_train <- as.matrix(y_train)
y_test <- test$Weekly_Sales
X_test <- subset(test, select = -Weekly_Sales)
fit_lm <- lm(Weekly_Sales ~ ., data = train)
summary(fit_lm)
prediction = predict(fit_lm, newdata = X_test)
residuals <- y_test - prediction
squared_residuals <- residuals^2
mse <- mean(squared_residuals)
rmse_lm <- sqrt(mse)
rmse_lm
mae_lm <- mae(y_test, prediction)
mae_lm
lasso_model <- cv.glmnet(X_matrix, y_matrix, alpha = 1)
coef(lasso_model)
X_test <- as.matrix(X_test)
y_test <- as.matrix(y_test)
prediction <- predict(lasso_model, newx = X_test)
mae_lasso <- mae(y_test, prediction)
mae_lasso
plot(lasso_model)
X_train_rem_hol <- subset(X_train, select = -EventsNo_Holiday)
X_train_rem_hol <- as.matrix(X_train_rem_hol)
fit2_rem_hol <- lm(y_train ~ X_train_rem_hol)
summary(fit2_rem_hol)
X_train_rem_months <- X_train[, !(colnames(X_train) %in% c("month2", "month3", "month4", "month5", "month6", "month7", "month8", "month9", "month10", "month11", "month12"))]
X_train_rem_months <- as.matrix(X_train_rem_months)
fit3 <- lm(y_train ~ X_train_rem_months)
summary(fit3)
X_train_rem_fuel <- X_train[, !(colnames(X_train) %in% c("Fuel_Price"))]
X_train_rem_fuel <- as.matrix(X_train_rem_fuel)
fit4 <- lm(y_train ~ X_train_rem_fuel)
summary(fit4)
X_train_rem_emp <- X_train[, !(colnames(X_train) %in% c("Unemployment"))]
X_train_rem_emp <- as.matrix(X_train_rem_emp)
fit5 <- lm(y_train ~ X_train_rem_emp)
summary(fit5)
library(randomForest)
# Fit random forest model using the training data
rf_model <- randomForest(X_train, y_train, ntree = 500, mtry = 4)
# View model summary
print(rf_model)
# Predict using the trained model on the test data
predictions <- predict(rf_model, X_test)
# Calculate RMSE (if needed)
# Assuming 'y_test' contains the actual test set values
rmse_rf <- sqrt(mean((predictions - y_test)^2))
rmse_rf
plot(rf_model)
df_store <- read_csv("~/University/E401 Machine Learning For Economic Data/Final Project/Walmart Sales Forecast/stores.csv")
df_features = read_csv("~/University/E401 Machine Learning For Economic Data/Final Project/Walmart Sales Forecast.csv")
df_store <- read_csv("~/University/E401 Machine Learning For Economic Data/Final Project/Walmart Sales Forecast/stores.csv")
df_features = read_csv("~/University/E401 Machine Learning For Economic Data/Final Project/Walmart Sales Forecast/features.csv")
df_train = read_csv("~/University/E401 Machine Learning For Economic Data/Final Project/Walmart Sales Forecast/train.csv")
# Display the first three rows of the data frame
head(df_store, 3)
head(df_features, 3)
#merging df_train and df_features dataset and df_store
df <- inner_join(inner_join(df_train, df_features, by = c("Store", "Date")), df_store, by = "Store")
library(readr)
library(glmnet)
library(corrplot)
library(Metrics)
library(dplyr)
library(ggplot2)
library(scales)
library(lubridate)
# Display the first three rows of the data frame
head(df_store, 3)
head(df_features, 3)
#merging df_train and df_features dataset and df_store
df <- inner_join(inner_join(df_train, df_features, by = c("Store", "Date")), df_store, by = "Store")
# Print the first 5 rows of the resulting data frame
head(df, 5)
# removing duplicate column since IsHoliday_y and IsHoliday_x are the same
df$IsHoliday.y <- NULL
#renaming Isholiday.x as isHoliday
names(df)[names(df) == "IsHoliday.x"] <- "IsHoliday"
# Print the first 5 rows of the resulting data frame
head(df, 5)
# check for non-zero and zero values for weekly sales
filtered_df <- subset(df, Weekly_Sales <= 0)
filtered_df
# total rows in dataframe = 421570
# total rows with missing or zero or negative values = 1348
# perventage of rows with missing values= 1348/ 421570= 0.31%
# therefore, removing them
df <- subset(df, Weekly_Sales > 0)
df
colnames(df)[colnames(df) == "IsHoliday_x"] <- "IsHoliday"
df
# Create a bar plot
ggplot(df, aes(x = IsHoliday, y = Weekly_Sales, fill = IsHoliday)) +
geom_bar(stat = "identity") +
labs(x = "Holiday", y = "Weekly Sales") +
ggtitle("Holiday vs. Weekly Sales")
# Create a bar plot
ggplot(df, aes(x = IsHoliday, y = Weekly_Sales, fill = IsHoliday)) +
geom_bar(stat = "identity") +
labs(x = "Holiday", y = "Weekly Sales") +
ggtitle("Holiday vs. Weekly Sales")
# Create a subset for rows where 'IsHoliday' is true
df_holiday <- subset(df, IsHoliday == TRUE)
# Get unique dates from the subset
unique_dates <- unique(df_holiday$Date)
# Print unique dates
print(unique_dates)
#create different rows in the dataset for the unique holidays
df$Super_Bowl <- ifelse(df$Date %in% as.Date(c('2010-02-12', '2011-02-11', '2012-02-10')), TRUE, FALSE)
df$Thanksgiving <- ifelse(df$Date %in% as.Date(c('2010-11-26', '2011-11-25')), TRUE, FALSE)
df$Labor_Day <- ifelse(df$Date %in% as.Date(c('2010-09-10', '2011-09-09', '2012-09-07')), TRUE, FALSE)
df$Christmas <- ifelse(df$Date %in% as.Date(c('2010-12-31', '2011-12-30')), TRUE, FALSE)
# Calculate the average weekly sales for both TRUE and FALSE values
average_sales <- tapply(df$Weekly_Sales, df$Thanksgiving, mean)
# Create a data frame for plotting
plot_data <- data.frame(
Thanksgiving = factor(names(average_sales)),
Average_Weekly_Sales = average_sales
)
# Create a bar plot
ggplot(plot_data, aes(x = Thanksgiving, y = Average_Weekly_Sales, fill = Thanksgiving)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Thanksgiving", y = "Average Weekly Sales") +
scale_fill_manual(values = c("FALSE" = "blue", "TRUE" = "red"), name = "Thanksgiving") +
ggtitle("Thanksgiving vs. Average Weekly Sales")
# Calculate the average weekly sales for both TRUE and FALSE values for Labor Day
average_sales_labor_day <- tapply(df$Weekly_Sales, df$Labor_Day, mean)
# Create a data frame for plotting for Labor Day
plot_data_labor_day <- data.frame(
Holiday = factor(names(average_sales_labor_day)),
Average_Weekly_Sales = average_sales_labor_day
)
# Create a bar plot for Labor Day
ggplot(plot_data_labor_day, aes(x = Holiday, y = Average_Weekly_Sales, fill = Holiday)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Labor Day", y = "Average Weekly Sales") +
scale_fill_manual(values = c("FALSE" = "blue", "TRUE" = "red"), name = "Labor Day") +
ggtitle("Labor Day vs. Average Weekly Sales")
# Calculate the average weekly sales for both TRUE and FALSE values for Christmas
average_sales_christmas <- tapply(df$Weekly_Sales, df$Christmas, mean)
# Create a data frame for plotting for Christmas
plot_data_christmas <- data.frame(
Holiday = factor(names(average_sales_christmas)),
Average_Weekly_Sales = average_sales_christmas
)
# Create a bar plot for Christmas
ggplot(plot_data_christmas, aes(x = Holiday, y = Average_Weekly_Sales, fill = Holiday)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Christmas", y = "Average Weekly Sales") +
scale_fill_manual(values = c("FALSE" = "blue", "TRUE" = "red"), name = "Christmas") +
ggtitle("Christmas vs. Average Weekly Sales")
# Calculate the average weekly sales by store type
average_sales_by_store <- aggregate(Weekly_Sales ~ Type, data = df, FUN = mean)
# Store types
store_types <- average_sales_by_store$Type
# Average weekly sales data
average_sales_data <- average_sales_by_store$Weekly_Sales
# Plotting a pie chart with percentage labels
pie(average_sales_data, labels = paste0(store_types, "\n", percent(average_sales_data / sum(average_sales_data))),
col = c("blue", "orange", "green"), cex = 1.2, border = "white",
main = "Average Weekly Sales by Store Type", cex.lab = 1.5)
# Create a boxplot
ggplot(df_store, aes(x = Type, y = Size)) +
geom_boxplot() +
labs(title = "Boxplot of Size by Type", x = "Type", y = "Size")
df$Date <- as.Date(df$Date)
# Create 'week', 'month', and 'year' columns
df$week <- week(df$Date)
df$month <- month(df$Date)
df$year <- year(df$Date)
# Calculate average weekly sales for each combination of 'month' and 'year'
df_avg <- df %>%
group_by(month, year) %>%
summarise(Avg_Weekly_Sales = mean(Weekly_Sales, na.rm = TRUE))
# Create a scatter plot for 'month' and 'year' against average weekly sales
ggplot(df_avg, aes(x = month, y = Avg_Weekly_Sales, color = factor(year))) +
geom_line() +
labs(title = "Average Weekly Sales by Month and Year", x = "Month", y = "Average Weekly Sales") +
scale_color_manual(values = c("blue", "red", "green")) +  # Set your desired color for each year
theme_minimal()
average_sales <- df %>%
group_by(Unemployment) %>%
summarise(Avg_Weekly_Sales = mean(Weekly_Sales, na.rm = TRUE))
# Create a line plot with 'Unemployment' on the x-axis and average 'Weekly_Sales' on the y-axis
ggplot(average_sales, aes(x = Unemployment, y = Avg_Weekly_Sales)) +
geom_line(color = "blue") +
labs(title = "Average Weekly Sales Against Unemployment", x = "Unemployment", y = "Average Weekly Sales") +
theme_minimal()
average_sales <- df %>%
group_by(CPI) %>%
summarise(Avg_Weekly_Sales = mean(Weekly_Sales, na.rm = TRUE))
ggplot(average_sales, aes(x = CPI, y = Avg_Weekly_Sales)) +
geom_line(color = "blue") +
labs(title = "Average Weekly Sales Against CPI", x = "CPI", y = "Average Weekly Sales") +
theme_minimal()
average_sales <- df %>%
group_by(Temperature) %>%
summarise(Avg_Weekly_Sales = mean(Weekly_Sales, na.rm = TRUE))
ggplot(average_sales, aes(x = Temperature, y = Avg_Weekly_Sales)) +
geom_line(color = "blue") +
labs(title = "Average Weekly Sales Against Temperature", x = "Temperature", y = "Average Weekly Sales") +
theme_minimal()
average_sales <- df %>%
group_by(Fuel_Price) %>%
summarise(Avg_Weekly_Sales = mean(Weekly_Sales, na.rm = TRUE))
ggplot(average_sales, aes(x = Fuel_Price, y = Avg_Weekly_Sales)) +
geom_line(color = "blue") +
labs(title = "Average Weekly Sales Against Unemployment", x = "Unemployment", y = "Average Weekly Sales") +
theme_minimal()
average_sales <- df %>%
group_by(month) %>%
summarise(Avg_Weekly_Sales = mean(Weekly_Sales, na.rm = TRUE))
# Create a bar plot with 'month' on the x-axis and 'Weekly_Sales' on the y-axis
ggplot(average_sales, aes(x = month, y = Avg_Weekly_Sales)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Monthly Sales", x = "Month", y = "Weekly Sales") +
theme_minimal()
data <- read_csv("~/University/E401 Machine Learning For Economic Data/Final Project/Walmart Sales Forecast/data5.csv")
corr = cor(data[, c(1:9)])
corrplot(corr, method = "color", cl.pos = 'n', rect.col = "black",  tl.col = "black", addCoef.col = "black", number.digits = 2, number.cex = 0.60, tl.cex = 0.7, cl.cex = 1, col = colorRampPalette(c("darkred","white","lightblue"))(100))
summary(df)
